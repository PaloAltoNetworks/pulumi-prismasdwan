// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prismasdwan
{
    /// <summary>
    /// Manages a Prisma SD-WAN site.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Prismasdwan = Pulumi.Prismasdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Prismasdwan.Site("example", new()
    ///     {
    ///         Config = "/Users/jdoe/sdwan_configs/site1.yaml",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [PrismasdwanResourceType("prismasdwan:index/site:Site")]
    public partial class Site : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The filesystem path of the site's JSON config.
        /// </summary>
        [Output("config")]
        public Output<string> Config { get; private set; } = null!;

        /// <summary>
        /// This will be set to false if the site config deployed does not match the given config file.
        /// </summary>
        [Output("isDeployed")]
        public Output<bool> IsDeployed { get; private set; } = null!;

        [Output("tfid")]
        public Output<string> Tfid { get; private set; } = null!;

        /// <summary>
        /// Timeouts for this resource's operations. A custom timeout is a string that has a number and a units suffix, such as 30s or 1h1m1s. Valid units are "h", "m", or "s". Note that changes to custom timeouts only take effect during resource creation or update. Default: 30m.
        /// </summary>
        [Output("timeout")]
        public Output<string> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a Site resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Site(string name, SiteArgs args, CustomResourceOptions? options = null)
            : base("prismasdwan:index/site:Site", name, args ?? new SiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Site(string name, Input<string> id, SiteState? state = null, CustomResourceOptions? options = null)
            : base("prismasdwan:index/site:Site", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Site resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Site Get(string name, Input<string> id, SiteState? state = null, CustomResourceOptions? options = null)
        {
            return new Site(name, id, state, options);
        }
    }

    public sealed class SiteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The filesystem path of the site's JSON config.
        /// </summary>
        [Input("config", required: true)]
        public Input<string> Config { get; set; } = null!;

        /// <summary>
        /// This will be set to false if the site config deployed does not match the given config file.
        /// </summary>
        [Input("isDeployed")]
        public Input<bool>? IsDeployed { get; set; }

        /// <summary>
        /// Timeouts for this resource's operations. A custom timeout is a string that has a number and a units suffix, such as 30s or 1h1m1s. Valid units are "h", "m", or "s". Note that changes to custom timeouts only take effect during resource creation or update. Default: 30m.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public SiteArgs()
        {
        }
        public static new SiteArgs Empty => new SiteArgs();
    }

    public sealed class SiteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The filesystem path of the site's JSON config.
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        /// <summary>
        /// This will be set to false if the site config deployed does not match the given config file.
        /// </summary>
        [Input("isDeployed")]
        public Input<bool>? IsDeployed { get; set; }

        [Input("tfid")]
        public Input<string>? Tfid { get; set; }

        /// <summary>
        /// Timeouts for this resource's operations. A custom timeout is a string that has a number and a units suffix, such as 30s or 1h1m1s. Valid units are "h", "m", or "s". Note that changes to custom timeouts only take effect during resource creation or update. Default: 30m.
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        public SiteState()
        {
        }
        public static new SiteState Empty => new SiteState();
    }
}
