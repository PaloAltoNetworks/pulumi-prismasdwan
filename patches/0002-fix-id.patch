Subject: [PATCH] fix minor upstream issues
---
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 28f4204052bc2bbcbb0278eac46345546bcdc03a)
+++ b/go.mod	(date 1719289736285)
@@ -20,7 +20,7 @@
 	github.com/apparentlymart/go-textseg/v13 v13.0.0 // indirect
 	github.com/armon/go-radix v1.0.0 // indirect
 	github.com/bgentry/speakeasy v0.1.0 // indirect
-	github.com/cloudflare/circl v1.3.3 // indirect
+	github.com/cloudflare/circl v1.3.8 // indirect
 	github.com/fatih/color v1.13.0 // indirect
 	github.com/golang/protobuf v1.5.3 // indirect
 	github.com/google/uuid v1.3.0 // indirect
@@ -55,13 +55,13 @@
 	github.com/vmihailenco/msgpack/v5 v5.3.5 // indirect
 	github.com/vmihailenco/tagparser/v2 v2.0.0 // indirect
 	github.com/zclconf/go-cty v1.13.2 // indirect
-	golang.org/x/crypto v0.14.0 // indirect
+	golang.org/x/crypto v0.24.0 // indirect
 	golang.org/x/exp v0.0.0-20230626212559-97b1e661b5df // indirect
-	golang.org/x/mod v0.11.0 // indirect
-	golang.org/x/net v0.17.0 // indirect
-	golang.org/x/sys v0.13.0 // indirect
-	golang.org/x/text v0.13.0 // indirect
+	golang.org/x/mod v0.17.0 // indirect
+	golang.org/x/net v0.21.0 // indirect
+	golang.org/x/sys v0.21.0 // indirect
+	golang.org/x/text v0.16.0 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20230525234030-28d5490b6b19 // indirect
 	google.golang.org/grpc v1.57.0 // indirect
-	google.golang.org/protobuf v1.31.0 // indirect
-)
+	google.golang.org/protobuf v1.34.2 // indirect
+)
\ No newline at end of file
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
--- a/go.sum	(revision 28f4204052bc2bbcbb0278eac46345546bcdc03a)
+++ b/go.sum	(date 1719289740111)
@@ -24,6 +24,7 @@
 github.com/cloudflare/circl v1.1.0/go.mod h1:prBCrKB9DV4poKZY1l9zBXg2QJY7mvgRvtMxxK7fi4I=
 github.com/cloudflare/circl v1.3.3 h1:fE/Qz0QdIGqeWfnwq0RE0R7MI51s0M2E4Ga9kq5AEMs=
 github.com/cloudflare/circl v1.3.3/go.mod h1:5XYMA4rFBvNIrhs50XuiBJ15vF2pZn4nnUKZrLbUZFA=
+github.com/cloudflare/circl v1.3.8/go.mod h1:PDRU+oXvdD7KCtgKxW95M5Z8BpSCJXQORiZFnBQS5QU=
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
@@ -186,14 +187,17 @@
 golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.14.0 h1:wBqGXzWJW6m1XrIKlAH0Hs1JJ7+9KBwnIO8v66Q9cHc=
 golang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=
+golang.org/x/crypto v0.24.0/go.mod h1:Z1PMYSOR5nyMcyAVAIQSKCDwalqy85Aqn1x3Ws4L5DM=
 golang.org/x/exp v0.0.0-20230626212559-97b1e661b5df h1:UA2aFVmmsIlefxMk29Dp2juaUSth8Pyn3Tq5Y5mJGME=
 golang.org/x/exp v0.0.0-20230626212559-97b1e661b5df/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=
 golang.org/x/mod v0.11.0 h1:bUO06HqtnRcc/7l71XBe4WcqTZ+3AH1J59zWDDwLKgU=
 golang.org/x/mod v0.11.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
+golang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=
 golang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=
+golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -207,11 +211,13 @@
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.13.0 h1:Af8nKPmuFypiUBjVoU9V20FiaFXOcuZI21p0ycVYYGE=
 golang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=
 golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
+golang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/genproto/googleapis/rpc v0.0.0-20230525234030-28d5490b6b19 h1:0nDDozoAU19Qb2HwhXadU8OcsiO/09cnTqhUtq2MEOM=
@@ -222,6 +228,7 @@
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=
 google.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=
 gopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=
Index: internal/provider/provider.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/provider/provider.go b/internal/provider/provider.go
--- a/internal/provider/provider.go	(revision 28f4204052bc2bbcbb0278eac46345546bcdc03a)
+++ b/internal/provider/provider.go	(date 1719339109641)
@@ -52,7 +52,7 @@
 			"host": schema.StringAttribute{
 				Description: ProviderParamDescription(
 					"The hostname of Strata Cloud Manager API.",
-					"api.sase.paloaltonetworks.com",
+					"pa-us01.api.prismaaccess.com",
 					"SCM_HOST",
 					"host",
 				),
Index: internal/provider/prismasdwan_site.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/provider/prismasdwan_site.go b/internal/provider/prismasdwan_site.go
--- a/internal/provider/prismasdwan_site.go	(revision 28f4204052bc2bbcbb0278eac46345546bcdc03a)
+++ b/internal/provider/prismasdwan_site.go	(date 1719251701502)
@@ -2,6 +2,8 @@
 
 import (
 	"context"
+	"crypto/sha512"
+	"encoding/hex"
 	"fmt"
 	"net/http"
 	"os"
@@ -41,6 +43,12 @@
 	Config string `json:"config"`
 }
 
+func GenerateIdFromConfig(config string) string {
+	hashMaker := sha512.New()
+	hashMaker.Write([]byte(config))
+	return hex.EncodeToString(hashMaker.Sum(nil))
+}
+
 func NewSdwanSiteDataSource() datasource.DataSource {
 	return &sdwanSiteDataSource{}
 }
@@ -164,6 +172,7 @@
 	Config     types.String `tfsdk:"config"`
 	Timeout    types.String `tfsdk:"timeout"`
 	IsDeployed types.Bool   `tfsdk:"is_deployed"`
+	Id         types.String `tfsdk:"id"`
 }
 
 func (r *sdwanSiteResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
@@ -192,6 +201,10 @@
 			"tfid": rsschema.StringAttribute{
 				Description: "The Terraform ID for this resource.",
 				Computed:    true,
+			},
+			"id": rsschema.StringAttribute{
+				Description: "Unique identifier for this resource.",
+				Computed:    true,
 			},
 		},
 	}
@@ -264,7 +277,7 @@
 
 	state.Tfid = types.StringValue(fmt.Sprintf("%s:%s", ans.Uuid, state.Config.ValueString()))
 	state.IsDeployed = types.BoolValue(ans.IsDeployed)
-
+	state.Id = types.StringValue(GenerateIdFromConfig(string(json)))
 	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
 }
 
@@ -283,19 +296,20 @@
 	}
 	uuid, config := tokens[0], tokens[1]
 
+	json, err := getConfigData(config)
+	if err != nil {
+		resp.Diagnostics.AddError("Error reading site JSON file/data", err.Error())
+		return
+	}
+
 	tflog.Info(ctx, "performing resource read", map[string]any{
 		"terraform_provider_function": "Read",
 		"resource_name":               "prismasdwan_site",
 		"uuid":                        uuid,
+		"id":                          GenerateIdFromConfig(string(json)),
 		"config":                      config,
 	})
 
-	json, err := getConfigData(config)
-	if err != nil {
-		resp.Diagnostics.AddError("Error reading site JSON file/data", err.Error())
-		return
-	}
-
 	path := fmt.Sprintf("/v1.0/api/sdwan/config/do_site/%s", uuid)
 	input := SdwanDoSiteRequest{
 		ClientId:     r.client.ClientId,
@@ -327,6 +341,7 @@
 	state.Tfid = savestate.Tfid
 	state.Timeout = savestate.Timeout
 	state.Config = types.StringValue(config)
+	state.Id = types.StringValue(GenerateIdFromConfig(string(json)))
 	state.IsDeployed = types.BoolValue(ans.IsDeployed)
 
 	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
@@ -348,18 +363,19 @@
 	}
 	uuid := tokens[0]
 
+	json, err := getConfigData(plan.Config.ValueString())
+	if err != nil {
+		resp.Diagnostics.AddError("Error reading site JSON file/data", err.Error())
+		return
+	}
+
 	tflog.Info(ctx, "performing resource update", map[string]any{
 		"terraform_provider_function": "Update",
 		"resource_name":               "prismasdwan_site",
 		"uuid":                        uuid,
-		"config":                    plan.Config.ValueString(),
+		"config":                      plan.Config.ValueString(),
+		"id":                          GenerateIdFromConfig(plan.Config.ValueString()),
 	})
-
-	json, err := getConfigData(plan.Config.ValueString())
-	if err != nil {
-		resp.Diagnostics.AddError("Error reading site JSON file/data", err.Error())
-		return
-	}
 
 	path := fmt.Sprintf("/v1.0/api/sdwan/config/do_site/%s", uuid)
 	input := SdwanDoSiteRequest{
@@ -392,6 +408,7 @@
 	}
 	state.Timeout = plan.Timeout
 	state.Config = plan.Config
+	state.Id = types.StringValue(GenerateIdFromConfig(state.Config.ValueString()))
 	state.IsDeployed = types.BoolValue(ans.IsDeployed)
 
 	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
@@ -416,6 +433,7 @@
 		"terraform_provider_function": "Delete",
 		"resource_name":               "prismasdwan_site",
 		"uuid":                        uuid,
+		"id":                          uuid,
 	})
 
 	json, err := getConfigData(state.Config.ValueString())
